<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BExitText" xml:space="preserve">
    <value>E&amp;xit</value>
  </data>
  <data name="GenerateImageText" xml:space="preserve">
    <value>&amp;Generate</value>
  </data>
  <data name="OFDialogFilter" xml:space="preserve">
    <value>Script files (*.sc)|*.sc|All files|*.*</value>
  </data>
  <data name="OFDialogTitle" xml:space="preserve">
    <value>Specify script file for image generation</value>
  </data>
  <data name="SaveSampleText" xml:space="preserve">
    <value>&amp;Example...</value>
  </data>
  <data name="SFDialogFilter" xml:space="preserve">
    <value>SVG vector image files|*.svg|EMF vector image files|*.emf</value>
  </data>
  <data name="SFDialogTitle" xml:space="preserve">
    <value>Specify placement for new image</value>
  </data>
  <data name="SSDialogTitle" xml:space="preserve">
    <value>Specify placement for example script</value>
  </data>
  <data name="BrokenLineColor" xml:space="preserve">
    <value>wrong curve's color declaration at line {0:D}</value>
  </data>
  <data name="BrokenLinePoint" xml:space="preserve">
    <value>wrong curve's point declaration at line {0:D}</value>
  </data>
  <data name="BrokenLineWidth" xml:space="preserve">
    <value>wrong curve's width declaration at line {0:D}</value>
  </data>
  <data name="BrokenOxColor" xml:space="preserve">
    <value>wrong Ox axe's color declaration at line {0:D}</value>
  </data>
  <data name="BrokenOxNotch" xml:space="preserve">
    <value>wrong Ox axe's notch declaration at line {0:D}</value>
  </data>
  <data name="BrokenOxOffset" xml:space="preserve">
    <value>wrong Ox axe's offset declaration at line {0:D}</value>
  </data>
  <data name="BrokenOxWidth" xml:space="preserve">
    <value>wrong Ox axe's width declaration at line {0:D}</value>
  </data>
  <data name="BrokenOyColor" xml:space="preserve">
    <value>wrong Oy axe's color declaration at line {0:D}</value>
  </data>
  <data name="BrokenOyNotch" xml:space="preserve">
    <value>wrong Oy axe's notch declaration at line {0:D}</value>
  </data>
  <data name="BrokenOyOffset" xml:space="preserve">
    <value>wrong Oy axe's offset declaration at line {0:D}</value>
  </data>
  <data name="BrokenOyWidth" xml:space="preserve">
    <value>wrong Oy axe's width declaration at line {0:D}</value>
  </data>
  <data name="BrokenText" xml:space="preserve">
    <value>wrong text subscription's declaration at line {0:D}</value>
  </data>
  <data name="CannotCreateFile" xml:space="preserve">
    <value>cannot create file in specified directory</value>
  </data>
  <data name="CannotCreateSample" xml:space="preserve">
    <value>Cannot create example file. Probably, specified directory is not writable</value>
  </data>
  <data name="CannotCreateTMP" xml:space="preserve">
    <value>cannot create temporary file. Probably, placement of the script file is not writable</value>
  </data>
  <data name="CannotIncludeFile" xml:space="preserve">
    <value>including file «{0:S}» not found, unavailable or declared with wrong parameters</value>
  </data>
  <data name="ExceptionMessage" xml:space="preserve">
    <value>Internal error occurred in application. Debug is required</value>
  </data>
  <data name="FileCreated" xml:space="preserve">
    <value>Image file successfully created</value>
  </data>
  <data name="FileNotAvailable" xml:space="preserve">
    <value>script file not found or unavailable</value>
  </data>
  <data name="FileWritingError" xml:space="preserve">
    <value>Failed to create image file: </value>
  </data>
  <data name="IncludeDeepOverflow" xml:space="preserve">
    <value>maximum number of includings has been exceeded. There may be a circular reference</value>
  </data>
  <data name="IncorrectImageSize" xml:space="preserve">
    <value>data in the script file doesn't allow generation of 2D-image</value>
  </data>
  <data name="InputFileNotSpecified" xml:space="preserve">
    <value>No image script file specified</value>
  </data>
  <data name="OutputFileNotSpecified" xml:space="preserve">
    <value>Image file's location not specified</value>
  </data>
  <data name="ScriptReadingError" xml:space="preserve">
    <value>Failed to read script file: </value>
  </data>
  <data name="CommandLineInfo" xml:space="preserve">
    <value>Using the command line:

VectorImageGenerator [Script file name] [Image file name] [Image type {SVG | EMF}]

• If the second parameter is absent, image file name is generated based on the name of script file in SVG format;
• If the third parameter is missing or incorrectly specified, image is saved in SVG format;
• If all parameters are missing, the application starts in normal mode</value>
  </data>
  <data name="HelpText" xml:space="preserve">
    <value>This tool allows you to generate vector image (SVG or EMF) using script file with adjustable parameters of curves, axes and text labels. This application is the side product of Geomag data drawer project. For more info save example file from the utility and open it as text</value>
  </data>
</root>